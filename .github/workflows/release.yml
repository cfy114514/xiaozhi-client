name: Release
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version type to release"
        required: true
        default: "stable"
        type: choice
        options:
          - stable
          - beta
      dry_run:
        description: "Dry run mode (preview only, no actual release)"
        required: true
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 确认当前分支
        run: |
          echo "手动触发发布，准备发布 ${{ github.event.inputs.version_type }} 版本"
          echo "Dry run 模式: ${{ github.event.inputs.dry_run }}"

      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建项目
        run: pnpm run build

      - name: 运行测试
        run: pnpm test
        continue-on-error: false

      - name: 验证已安装依赖项的来源证明和注册中心签名的完整性
        run: pnpm audit signatures

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            if [ "${{ github.event.inputs.version_type }}" = "stable" ]; then
              echo "手动触发稳定版 Dry Run（预览模式）"
              pnpm run release:dry
            else
              echo "手动触发 beta 版 Dry Run（预览模式）"
              # 临时替换配置文件以支持从 feature/docker 分支发布
              mv .releaserc .releaserc.backup
              cp .releaserc.beta.json .releaserc
              pnpm run release:dry
              # 恢复原始配置文件
              mv .releaserc.backup .releaserc
            fi
          else
            if [ "${{ github.event.inputs.version_type }}" = "stable" ]; then
              echo "手动触发稳定版实际发布"
              # pnpm run release
            else
              echo "手动触发 beta 版实际发布"
              # 临时替换配置文件以支持从 feature/docker 分支发布
              mv .releaserc .releaserc.backup
              cp .releaserc.beta.json .releaserc
              pnpm run release
              # 恢复原始配置文件
              mv .releaserc.backup .releaserc
            fi
          fi

      - name: 设置 Docker Buildx
        if: success() && github.event.inputs.dry_run == 'false'
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        if: success() && github.event.inputs.dry_run == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 获取发布版本号
        if: success() && github.event.inputs.dry_run == 'false'
        id: get_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "发布版本: $VERSION"

      - name: 构建并推送 Docker 镜像
        if: success() && github.event.inputs.dry_run == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            XIAOZHI_VERSION=${{ steps.get_version.outputs.version }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/xiaozhi-client:latest
            ${{ secrets.DOCKER_USERNAME }}/xiaozhi-client:${{ steps.get_version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/xiaozhi-client:${{ github.event.inputs.version_type == 'stable' && 'stable' || 'beta' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
